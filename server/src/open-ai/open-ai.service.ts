import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import {OpenAI} from 'openai';

const json = {
    "invoiceNumber": "40/2023-24",
    "invoiceDate": "18-07-2023",
    "vendorDetails": {
      "Name": "VANSH MARKETING",
      "Address": "34, RAGHUVIR PURI, BEHIND NEW BUS STAND, ALIGARH",
      "Phone": "7906456234, 9219530500",
      "Email": "val3@example.com",
      "GSTIN": "27AAGFO0745E12G",
      "BankDetails": {
        "BankName": "BANK OF INDIA",
        "Branch": "SSI BRANCH, ALIGARH",
        "AccountNumber": "775130110000222",
        "IFSC": "BKID0007751"
      }
    },
    "notes": {
      "FreightToPay": "Yes",
      "PaymentTerms": "1. If Bill Is Not Paid Within 30 Days Interest @ 18% P.A. Will be Charged.",
      "PaymentOptions": "2. Payment Should Be Made by A/C Payee Cheque or Draft, NEFT or RTGS.",
      "ReturnPolicy": "3. Goods sold once will not be taken back under any circumstances.",
      "ChequeReturnCharge": "4. Cheque return will be charged @ Rs. 300 per Cheque.",
      "Jurisdiction": "5. All Disputes Subject to ALIGARH Jurisdiction only."
    },
    "items": [
      {
        "Description": "ROSE HANDLE VIVO (SSF)",
        "HSNCode": "8301",
        "Qty": "1704",
        "Rate": "23.00",
        "GSTRate": "18%",
        "Amount": "11,650.00"
      },
      {
        "Description": "M/L ROLLER 50 X 85 (SSF)",
        "HSNCode": "8301",
        "Qty": "1.00",
        "Rate": "610.00",
        "GSTRate": "18%",
        "Amount": "610.00"
      }
    ],
    "totalAmount": {
      "SubTotal": "11,650.00",
      "GST": "2,097.00",
      "Postage": "3000",
      "GrandTotal": "13,777.00",
      "InWords": "Rupees Thirteen Thousand Seven Hundred Seventy Seven Only"
    }
  }
  
  
  

@Injectable()
export class OpenAiService extends OpenAI {
    constructor(configService: ConfigService) {
        super({
            apiKey: configService.get('OPEN_AI_KEY'),
        })
    }

    async getJson(text: string) {
        try {
            const prompt = `"""${text}"""
      Please analyze the text enclosed by triple double-quotes (""") from this document generated by an OCR model and convert it into a JSON representation in the format #${JSON.stringify(json)}#. Add # as delimiters before the JSON start and after the JSON end. Make any required text corrections for clarity and accuracy. The output should be a minified JSON format within the # delimiters.`;
        const response = await this.chat.completions.create({
            messages: [{ role: 'user', content: prompt }],
            model: 'gpt-3.5-turbo',
            max_tokens: 100,
        })
            console.log(response.choices[0]);
            
      // console.log("response",response.join(""));
    //   let jsonText = response.choices[0].split("#")[1].trim();
    //   // console.log("jsonText", jsonText)
    //   // console.log("jsonText",jsonText);
    //   // const cleanedJson = JSON.stringify(jsonText.replace(/\\n/g, "").replace(/\\t/g, "").replace(/\\r/g, "").replace(/\\/g, ""));
    //   // //console.log("cleanedJson", cleanedJson);
    //   // // Parse the cleaned JSON
    //   // let parsedJson: BillData = JSON.parse(cleanedJson);
    //   // //console.log("parsedJson", parsedJson);
      
    //     const closingBraceIndex = jsonText.lastIndexOf('}');
    //     if (closingBraceIndex !== -1) {
    //       jsonText = jsonText.slice(0, closingBraceIndex + 1);
    //     }
    //   // }
        
    //     //console.log("parsedJson", parsedJson);
    //   let parsedJson = JSON.parse(jsonText);
      
    //   // console.log("parsedJson",parsedJson);

    //   return  parsedJson ;
    } catch (err) {
      console.log(err);
      throw err;
    }
  
    
        
    }
}
